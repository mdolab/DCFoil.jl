"""
Run tests on hydro module file
"""

using LinearAlgebra
using Printf


include("../src/DCFoil.jl")
using .DCFoil: SolveStatic, SolutionConstants, InitModel, FEMMethods, HydroStrip, VPM, LiftingLine, TecplotIO
using Plots, Printf, Profile
# ==============================================================================
#                         Nodal hydrodynamic forces
# ==============================================================================
function test_stiffness()
    """
    Compare strip forces to a hand calculated reference solution
    TODO: use a non-zero 'a'
    """

    # --- Reference value ---
    # These were obtained from hand calcs
    ref_sol = vec([
        0.0 -6250*π
        0.0 -6250/4*π
    ])
    sweepref_sol = vec([
        3125*2π -3125*π/2
        3125*π/2 3125*π/8
    ])

    clα = 2 * π
    b = 0.5
    eb = 0.25
    ab = 0.0
    U = 5.0
    Λ = 45 * π / 180 # 45 deg
    clambda = cos(Λ)
    slambda = sin(Λ)
    ω = 1e10 # infinite frequency limit
    ρ = 1000.0
    k = ω * b / (U * cos(Λ))
    CKVec = HydroStrip.compute_theodorsen(k)
    Ck::ComplexF64 = CKVec[1] + 1im * CKVec[2]
    Matrix, SweepMatrix = HydroStrip.compute_node_stiff_faster(clα, b, eb, ab, U, clambda, slambda, ρ, Ck)

    # show(stdout, "text/plain", real(Matrix))
    # show(stdout, "text/plain", imag(Matrix))
    # show(stdout, "text/plain", real(SweepMatrix))
    # show(stdout, "text/plain", imag(SweepMatrix))

    # --- Relative error ---
    answers = vec(real(Matrix)) # put computed solutions here
    rel_err1 = LinearAlgebra.norm(answers - ref_sol, 2) / LinearAlgebra.norm(ref_sol, 2)
    # For sweep
    sweepAnswers = vec(real(SweepMatrix)) # put computed solutions here
    rel_err2 = LinearAlgebra.norm(sweepAnswers - sweepref_sol, 2) / LinearAlgebra.norm(sweepref_sol, 2)

    # Just take the max error
    rel_err = max(abs(rel_err1), abs(rel_err2))

    return rel_err
end

function test_damping()
    """
    Compare strip forces to a hand calculated reference solution
    TODO: use a non-zero 'a'
    """
    # --- Reference value ---
    # These were obtained from hand calcs
    ref_sol = 625 * sqrt(2) * vec([
                  2π -1.5*π
                  0.5*π 0.125*π
              ])
    sweepref_sol = 625 * sqrt(2) * vec([
                       π 0.0
                       0.0 π/32
                   ])

    clα = 2 * π
    b = 0.5
    eb = 0.25
    ab = 0.0
    U = 5.0
    Λ = 45 * π / 180 # 45 deg
    clambda = cos(Λ)
    slambda = sin(Λ)
    ω = 1e10 # infinite frequency limit
    ρ = 1000.0
    k = ω * b / (U * cos(Λ))
    CKVec = HydroStrip.compute_theodorsen(k)
    Ck::ComplexF64 = CKVec[1] + 1im * CKVec[2] # TODO: for now, put it back together so solve is easy to debug
    Matrix, SweepMatrix = HydroStrip.compute_node_damp_faster(clα, b, eb, ab, U, clambda, slambda, ρ, Ck)

    # --- Relative error ---
    answers = vec(real(Matrix)) # put computed solutions here
    rel_err1 = LinearAlgebra.norm(answers - ref_sol, 2) / LinearAlgebra.norm(ref_sol, 2)
    # For sweep
    sweepAnswers = vec(real(SweepMatrix)) # put computed solutions here
    rel_err2 = LinearAlgebra.norm(sweepAnswers - sweepref_sol, 2) / LinearAlgebra.norm(sweepref_sol, 2)

    # Just take the max error and normalize it by the norm of the sweep reference solution
    rel_err = max(abs(rel_err1), abs(rel_err2))

    # println(ref_sol)
    # println(answers)
    # println(sweepref_sol)
    # println(sweepAnswers)

    return rel_err
end

function test_mass()
    # --- Reference value ---
    # These were obtained from hand calcs
    ref_sol = 250 * π * vec([
                  1.0 0.25
                  0.25 3/32
              ])

    clα = 2 * π
    b = 0.5
    eb = 0.25
    ab = 0.25
    U = 5.0
    Λ = 45 * π / 180 # 45 deg
    ω = 1e10 # infinite frequency limit
    ρ = 1000.0
    Matrix = HydroStrip.compute_node_mass(b, ab, ρ)

    # --- Relative error ---
    answers = vec(real(Matrix)) # put computed solutions here
    rel_err = LinearAlgebra.norm(answers - ref_sol, 2) / LinearAlgebra.norm(ref_sol, 2)


    # println(ref_sol)
    # println(answers)

    return rel_err
end

# ==============================================================================
#                         Larger scale tests
# ==============================================================================

function test_dwWave()
    FALTINSENDATACLvsFnc = [
        0.5094812005034943 0.3426978668091788
        0.5433651233527405 0.3499158955949865
        0.5758285113651205 0.34131039462543256
        0.5972677381400785 0.3597312329104295
        0.6284165013752634 0.37750318109997694
        0.6643105956038546 0.31019176904096146
        0.6468506238891395 0.35364149432649095
        0.6588488341736092 0.33030751747904974
        0.6975881065957248 0.28309854810000235
        0.7177389272903784 0.3128806628622546
        0.7230589987837779 0.33311098940145367
        0.7269223105419024 0.3484113211732518
        0.747578059268363 0.3697831358555631
        0.7527163614042112 0.3977708394159597
        0.7602982124406361 0.41819166180511114
        0.767277895259778 0.43583771741082633
        0.7709574751020014 0.45570589437165493
        0.7737246439854444 0.4703588968647249
        0.7807950102422779 0.4850295448211071
        0.8117787006400436 0.4999526137303307
        0.8434800804509636 0.44248826212708625
        0.83172748513974 0.4681376575844303
        0.8481549601173562 0.4216433968266685
        0.8558979238148724 0.39847452896502555
        0.862639559748705 0.3769313818815687
        0.888871249852291 0.2575665850922475
        0.8792665682956471 0.31711349385708254
        0.8864701699869266 0.2889837818710749
        0.9018663519768098 0.23392132359641382
        0.9079696697416079 0.2101699683073135
        0.9128085559262755 0.19992927144564887
        0.9222366199126888 0.15765838823947986
        0.9161946843918923 0.1798920973657624
        0.9344087296147973 0.12852017595227128
        0.9418438080985021 0.10735031091359803
        0.9485197599584166 0.09236664400152772
        0.9839094276395153 0.06857495388234536
        1.0147478320461998 0.08098950597435772
        1.02791912744865 0.0980766591046025
        1.037556252589681 0.11629333137032816
        1.0476137199218107 0.13995180640347227
        1.057817829844837 0.16372331674000107
        1.0694851443280249 0.18946444885221514
        1.0786686049446788 0.21092089691405358
        1.084759557560752 0.23339407804250367
        1.0901989759456832 0.2531812117586576
        1.095650319895372 0.2698613383366598
        1.1078445244814372 0.29518117249704656
        1.0978145403574262 0.2807845420642734
        1.1197362040305139 0.3172081808502193
        1.1331722072750483 0.3930578452505979
        1.124057084998392 0.3410242089019534
        1.1283670737219271 0.3676780296798253
        1.16526832207864 0.44273328020471625
        1.1786002488339549 0.5000812936459995
        1.1720375724176564 0.4855529316480076
        1.18292845966172 0.5219876488685008
        1.1912396776348624 0.5407824704099318
        1.1993273602977048 0.5603382139840479
        1.2091909002404162 0.5770437607294862
        1.2183809942059345 0.5967720003004784
        1.2306391007727577 0.62186537482953
        1.2398220814741816 0.6434468568059688
        1.2551770350011995 0.6663930546569535
        1.2683528118038574 0.6823126536531445
        1.2797647620783037 0.6979480376462506
        1.2947008547963945 0.7150664832947949
        1.3167003793153365 0.7312047763742255
        1.347521140213331 0.7482160505968596
        1.3960410959051135 0.7521953060761464
        1.4402160437360798 0.738644393343945
        1.4733785477119756 0.7203283124455093
        1.4999249929199572 0.7013917515566851
        1.5242581414029768 0.6843179893031484
        1.5463899121516107 0.6660017313400982
        1.586234416562865 0.63112612800729
        1.6010130659677104 0.6126271682299798
        1.6282934418116266 0.5940688039172956
        1.641577939136433 0.58166308287645
        1.6592890299111627 0.5655317645650293
        1.679214811794694 0.5471743641486395
        1.6984013125353243 0.5298327525711248
        1.7234877044073484 0.5081055709605178
        1.7411828495054966 0.4961286329211957
        1.7588956660028003 0.4795477063552188
        1.7810263322889872 0.46151919767508454
        1.8031553418815032 0.44392231291932427
        1.8252799336242302 0.4274764252952275
        1.8496111492979672 0.41090622428679374
        1.8761546032534875 0.39274898437253336
        1.9026920747040856 0.37615038640740095
        1.9314367617620043 0.35927332365636944
        1.9675235601632606 0.3454474348371098
        1.9955443476901102 0.32557873832234363
        2.0309088901056054 0.3083330174016772
        2.075100503485998 0.29044017352547646
        2.119287975132214 0.2736263894602107
        2.1700885690787266 0.2581981330819749
        2.21867387213197 0.24515222265540282
        2.271668741505742 0.23281684973654282
        2.3268640989080396 0.22195577056065618
        2.3776345502335965 0.21438067169533426
        2.4328158717589607 0.20717640632317103
        2.483579292362921 0.20143304479122592
        2.5343321924507465 0.19843062839631576
        2.585083584129211 0.19582120292020289
        2.6380428652685723 0.19275775133974482
        2.693204973749282 0.19055912453497303
        2.746155664625165 0.18973372293275015
        2.799103939489445 0.18953777288690565
        2.8520508337756665 0.1897015094447061
        2.902790183745505 0.19022935045594036
        2.95573219670216 0.1916648360766282
        3.0064659356083157 0.19365454621267641
        3.059406755351077 0.19540090382651454
        3.114557665809752 0.19611973502908497
        3.167497312061163 0.19817182625602114
        3.218234322718179 0.1993091362345426
        3.273379979310352 0.20139677478987283
        3.3263183983812663 0.20376858744227122
        3.3770542969059574 0.20519564496261766
        3.4299884208451323 0.2086864826041337
        3.4829291025300875 0.2104688088783362
        3.535867023058925 0.21297050835982856
        3.5888113287612855 0.2138086572994633
        3.648367781078508 0.21628653250460095
        3.6968939399945895 0.21864964127994513
        3.7454209437032637 0.22079265342509657
        3.7939499999578756 0.22240090893527842
        3.8424741330369185 0.2252918157870264
        3.8910028426528833 0.22699038221933543
        3.939901627384061 0.22806784109738043
        3.983652185519682 0.2292887945298282
    ]
    semispan = 1.0
    nNodes = 10
    chordVec = 0.1 * ones(nNodes)
    alfa0 = deg2rad(4.0)
    Uinf = 2.0
    GRAV = 9.81
    depth = 0.1
    # ξRange = LinRange(0, 10, 100)
    pcRatio = 6
    URange = LinRange(0.5, 10, 1000)
    chordRefM = sum(chordVec) / nNodes

    clalfa, _, _ = DCFoil.HydroStrip.compute_glauert_circ(semispan, chordVec, alfa0, Uinf, nNodes)

    cl = clalfa * alfa0
    ξ = pcRatio * chordRefM
    Fnc = Uinf / sqrt(GRAV * chordRefM)
    Fnh = Uinf / sqrt(GRAV * depth)

    alphavsXi = []
    # for ξ in ξRange
    FncRange = []
    for U in URange

        Fnc = U / sqrt(GRAV * chordRefM)
        Fnh = U / sqrt(GRAV * depth)

        alpha = DCFoil.HydroStrip.compute_wavePatternDWAng(cl, chordVec, Fnc, Fnh, ξ)

        # FALTINSEN TEST CODE
        cltest = 0.35 * ones(nNodes)
        cl = cltest[1]
        alpha = DCFoil.HydroStrip.compute_wavePatternDWAng(cl, chordRefM, Fnc, Fnh, ξ)

        # Just grab root value
        push!(alphavsXi, alpha[1])
        push!(FncRange, Fnc)
    end

    # plot(ξRange, alphavsXi, xlabel="ξ [m]", ylabel="α_dw [rad]", title=@sprintf("α vs downstream distance ξ \n Fnc = %.1f, Fnh = %.1f", Fnc, Fnh))
    plot(FncRange, alphavsXi, xlabel="Fn_c", ylabel="α_dw [rad]", title=@sprintf("α_w vs Fnc\n ξ/c=%.1f", pcRatio), label=:false)

    # FALTINSEN TEST CODE
    cl2 = 0.35 .+ 2π * alphavsXi
    plot(FncRange, cl2, xlabel="Fn_c", ylabel="CL2", title=@sprintf("CL2 vs. Fn_c (U) \n ξ/c=%.1f", pcRatio), label="Eqn")
    scatter!(FALTINSENDATACLvsFnc[:, 1], FALTINSENDATACLvsFnc[:, 2], label="Faltinsen 2005")
    xlims!(0.5, 4)
    plot!(tick_direction=:out)
    savefig("test_dwWave.pdf")
    println("Making plot test_dwWave.pdf to check")
    return 1e-6
end

function test_dwWake()
    semispan = 1.0
    nNodes = 10
    chordVec = 0.1 * ones(nNodes)
    alfa0 = deg2rad(4.0)
    Uinf = 2.0
    GRAV = 9.81
    depth = 0.4
    chordRefM = sum(chordVec) / nNodes

    GLAURTVALUES = [
        1/3 3.23
        2/3 2.43
        1.0 2.22
        2.0 2.06
    ]

    clalfa, _, _ = DCFoil.HydroStrip.compute_glauert_circ(semispan, chordVec, alfa0, Uinf, nNodes)

    cl = clalfa * alfa0
    CL = 0.35

    xM = 0.0
    xRRange = LinRange(0, 10, 100)
    epsvsXr = []
    # αi on the wing
    ϵ0 = CL / (π * (2 * semispan) / chordRefM)
    for xR in xRRange
        ϵ = DCFoil.HydroStrip.compute_wakeDWAng(semispan * 2, chordRefM, CL, xR)
        push!(epsvsXr, ϵ)
    end

    plot(xRRange ./ (semispan * 2), epsvsXr ./ ϵ0, xlabel="x/s ", ylabel="ε/αi", title=@sprintf("ε vs downstream distance \n CL_M = %.2f", CL), label="Eqn")
    # Plot glauert values as scatter
    scatter!(GLAURTVALUES[:, 1], GLAURTVALUES[:, 2], label="Glauert 1983")
    xlims!(0.2, 3)
    ylims!(1.5, 6.0)
    # set tick direction out for plot
    plot!(tick_direction=:out)

    savefig("test_dwWake.pdf")
    println("Making plot test_dwWake.pdf to check")
    return 1e-6
end

function test_AICs()
    aeroMesh = [
        0.0 0.0 0.0
        0.0 1.0 0.0
    ]
    chordVec = [1.0, 1.0]
    abVec = [0.0, 0.0]
    ebVec = [0.5, 0.5]
    Λ = 0.0
    nNodes = 2
    DVDict = Dict(
        "alfa0" => 6.0, # initial angle of attack [deg]
        "sweep" => deg2rad(-15.0), # sweep angle [rad]
        "zeta" => 0.04, # modal damping ratio at first 2 modes
        "c" => 0.1 * ones(nNodes), # chord length [m]
        "s" => 0.3, # semispan [m]
        "ab" => 0 * ones(nNodes), # dist from midchord to EA [m]
        "toc" => 0.12, # thickness-to-chord ratio
        "x_ab" => 0 * ones(nNodes), # static imbalance [m]
        "theta_f" => deg2rad(15), # fiber angle global [rad]
        "s_strut" => 0.4, # from Yingqian
    )

    solverOptions = Dict(
        # ---------------------------
        #   I/O
        # ---------------------------
        # "name" => "akcabay-swept",
        "name" => "t-foil",
        "debug" => false,
        # ---------------------------
        #   General appendage options
        # ---------------------------
        "config" => "wing",
        # "config" => "t-foil",
        "nNodes" => nNodes, # number of nodes on foil half wing
        "nNodeStrut" => 10, # nodes on strut
        "rotation" => 45.0, # deg
        "gravityVector" => [0.0, 0.0, -9.81],
        "use_tipMass" => false,
        # ---------------------------
        #   Flow
        # ---------------------------
        "Uinf" => 5.0, # free stream velocity [m/s]
        "rhof" => 1000.0, # fluid density [kg/m³]
        "use_freeSurface" => false,
        "use_cavitation" => false,
        "use_ventilation" => false,
        # ---------------------------
        #   Structure
        # ---------------------------
        "material" => "cfrp", # preselect from material library
        # ---------------------------
        #   Solver modes
        # ---------------------------
        # --- Static solve ---
        "run_static" => true,
        # --- Forced solve ---
        "run_forced" => false,
        "fRange" => [1, 2],
        "tipForceMag" => 1,
        # --- p-k (Eigen) solve ---
        "run_modal" => false,
        "run_flutter" => false,
        "nModes" => 1,
        "uRange" => [1, 2],
        "maxQIter" => 100, # that didn't fix the slow run time...
        "rhoKS" => 100.0,
    )

    FOIL = InitModel.init_model_wrapper(DVDict, solverOptions)

    elemType = "BT2"
    # elemType = "COMP2"
    alfaRad = deg2rad(4.0)
    if elemType == "bend"
        error("Only bend-twist element type is supported for load computation")
    elseif elemType == "bend-twist"
        nDOF = 3
        staticOffset = [0, 0, alfaRad]
    elseif elemType == "BT2"
        nDOF = 4
        # nGDOF = nDOF * 3 # number of DOFs on node in global coordinates
        staticOffset = [0, 0, alfaRad, 0] #TODO: pretwist will change this
    # staticOffset = [0, 0, 0, 0, 0, 0, alfaRad, 0, 0, 0, 0, 0]
    elseif elemType == "COMP2"
        nDOF = 9
        staticOffset = [0, 0, 0, alfaRad, 0, 0, 0, 0, 0]
    end
    AIC = zeros(nDOF * nNodes, nDOF * nNodes)

    AIC, planformArea = HydroStrip.compute_steady_AICs!(AIC, aeroMesh, chordVec, abVec, ebVec, Λ, FOIL, elemType)
    dummy = AIC[:, 1]
    w = dummy[1:nDOF:end]
    structStates = (repeat(staticOffset, outer=[length(w)]))
    fHydro = -1 * AIC * structStates
    return AIC, fHydro
end

# function run_hydrofoil()
#     chordVec = ones(10)
#     alpha = 1.0
#     Uinf = 5.0
#     clalpha, cl, gamma = HydroStrip.compute_spanwise_vortex(semispan, chordVec, alpha, Uinf, nNodes, "elliptical")
#     clalpha, cl, gamma = HydroStrip.compute_spanwise_vortex(semispan, chordVec, alpha, Uinf, nNodes, "chord")

# end

# AIC, fHydro = test_AICs()

# ==============================================================================
#                         Test lifting line code
# ==============================================================================
function test_VPM()
    airfoilX = [1.00000000e+00, 9.98983961e-01, 9.95940183e-01,
        9.90881655e-01, 9.83829939e-01, 9.74815051e-01,
        9.63875290e-01, 9.51057023e-01, 9.36414438e-01,
        9.20009251e-01, 9.01910391e-01, 8.82193653e-01,
        8.60941320e-01, 8.38241778e-01, 8.14189094e-01,
        7.88882584e-01, 7.62426369e-01, 7.34928905e-01,
        7.06502508e-01, 6.77262862e-01, 6.47328517e-01,
        6.16820381e-01, 5.85861206e-01, 5.54575073e-01,
        5.23086880e-01, 4.91521839e-01, 4.60004979e-01,
        4.28660672e-01, 3.97631556e-01, 3.67253779e-01,
        3.37414109e-01, 3.08224091e-01, 2.79792467e-01,
        2.52224996e-01, 2.25624298e-01, 2.00089704e-01,
        1.75717105e-01, 1.52598783e-01, 1.30823213e-01,
        1.10474834e-01, 9.16337794e-02, 7.43755645e-02,
        5.87707351e-02, 4.48844859e-02, 3.27762555e-02,
        2.24993132e-02, 1.41003523e-02, 7.61910468e-03,
        3.08799469e-03, 5.31844686e-04, -2.83870691e-05,
        1.44008274e-03, 4.94200664e-03, 1.04698608e-02,
        1.80077131e-02, 2.75311237e-02, 3.90070567e-02,
        5.23938162e-02, 6.76410223e-02, 8.46896392e-02,
        1.03472072e-01, 1.23912338e-01, 1.45926329e-01,
        1.69422161e-01, 1.94300609e-01, 2.20455639e-01,
        2.47775004e-01, 2.76140921e-01, 3.05430784e-01,
        3.35517928e-01, 3.66272407e-01, 3.97561776e-01,
        4.29024490e-01, 4.60745064e-01, 4.92612197e-01,
        5.24495035e-01, 5.56263127e-01, 5.87786972e-01,
        6.18938555e-01, 6.49591858e-01, 6.79623359e-01,
        7.08912505e-01, 7.37342170e-01, 7.64799099e-01,
        7.91174326e-01, 8.16363574e-01, 8.40267633e-01,
        8.62792718e-01, 8.83850790e-01, 9.03359866e-01,
        9.21244282e-01, 9.37434939e-01, 9.51869515e-01,
        9.64492643e-01, 9.75256067e-01, 9.84118763e-01,
        9.91047043e-01, 9.96014629e-01, 9.99002715e-01,
        1.00000000e+00]

    airfoilY = [1.32931687e-17, -7.38342600e-05, -2.94838388e-04,
        -6.61534665e-04, -1.17151910e-03, -1.82154316e-03,
        -2.60761565e-03, -3.52511341e-03, -4.56888783e-03,
        -5.73335407e-03, -7.01255010e-03, -8.40015486e-03,
        -9.88945762e-03, -1.14732744e-02, -1.31438115e-02,
        -1.48924812e-02, -1.67096794e-02, -1.85845380e-02,
        -2.05046708e-02, -2.24559320e-02, -2.44222083e-02,
        -2.63852669e-02, -2.83246777e-02, -3.02178266e-02,
        -3.20400333e-02, -3.37647782e-02, -3.53640411e-02,
        -3.68087440e-02, -3.80696794e-02, -3.91912332e-02,
        -4.01948507e-02, -4.10450021e-02, -4.17065851e-02,
        -4.21457179e-02, -4.23304737e-02, -4.22315281e-02,
        -4.18226899e-02, -4.10812967e-02, -3.99884614e-02,
        -3.85291639e-02, -3.66921921e-02, -3.44699408e-02,
        -3.18580895e-02, -2.88551809e-02, -2.54621317e-02,
        -2.16817065e-02, -1.75179898e-02, -1.29758887e-02,
        -8.06069877e-03, -2.77775776e-03, 2.82808768e-03,
        8.51222505e-03, 1.42221385e-02, 1.99372801e-02,
        2.56298579e-02, 3.12655584e-02, 3.68044732e-02,
        4.22021973e-02, 4.74110551e-02, 5.23814122e-02,
        5.70630246e-02, 6.14063789e-02, 6.53639803e-02,
        6.88915470e-02, 7.19490770e-02, 7.45017605e-02,
        7.65207179e-02, 7.79835532e-02, 7.88747205e-02,
        7.91857090e-02, 7.89150602e-02, 7.80682354e-02,
        7.67163113e-02, 7.49590252e-02, 7.28229631e-02,
        7.03373443e-02, 6.75339270e-02, 6.44465399e-02,
        6.11106600e-02, 5.75630455e-02, 5.38414246e-02,
        4.99842364e-02, 4.60304159e-02, 4.20192105e-02,
        3.79900151e-02, 3.39822078e-02, 3.00349748e-02,
        2.61871084e-02, 2.24767697e-02, 1.89412087e-02,
        1.56164396e-02, 1.25368744e-02, 9.73492038e-03,
        7.24055476e-03, 5.08088827e-03, 3.27973662e-03,
        1.85721674e-03, 8.29386282e-04, 2.07943232e-04,
        -1.32931687e-17]
    airfoilCtrlX = [9.99491981e-01, 9.97462072e-01, 9.93410919e-01,
        9.87355797e-01, 9.79322495e-01, 9.69345170e-01,
        9.57466157e-01, 9.43735731e-01, 9.28211845e-01,
        9.10959821e-01, 8.92052022e-01, 8.71567487e-01,
        8.49591549e-01, 8.26215436e-01, 8.01535839e-01,
        7.75654476e-01, 7.48677637e-01, 7.20715707e-01,
        6.91882685e-01, 6.62295690e-01, 6.32074449e-01,
        6.01340793e-01, 5.70218139e-01, 5.38830977e-01,
        5.07304360e-01, 4.75763409e-01, 4.44332826e-01,
        4.13146114e-01, 3.82442667e-01, 3.52333944e-01,
        3.22819100e-01, 2.94008279e-01, 2.66008731e-01,
        2.38924647e-01, 2.12857001e-01, 1.87903405e-01,
        1.64157944e-01, 1.41710998e-01, 1.20649023e-01,
        1.01054307e-01, 8.30046719e-02, 6.65731498e-02,
        5.18276105e-02, 3.88303707e-02, 2.76377844e-02,
        1.82998328e-02, 1.08597285e-02, 5.35354969e-03,
        1.80991969e-03, 2.51728808e-04, 7.05847836e-04,
        3.19104469e-03, 7.70593373e-03, 1.42387870e-02,
        2.27694184e-02, 3.32690902e-02, 4.57004365e-02,
        6.00174193e-02, 7.61653308e-02, 9.40808554e-02,
        1.13692205e-01, 1.34919333e-01, 1.57674245e-01,
        1.81861385e-01, 2.07378124e-01, 2.34115321e-01,
        2.61957963e-01, 2.90785852e-01, 3.20474356e-01,
        3.50895168e-01, 3.81917092e-01, 4.13293133e-01,
        4.44884777e-01, 4.76678630e-01, 5.08553616e-01,
        5.40379081e-01, 5.72025050e-01, 6.03362763e-01,
        6.34265207e-01, 6.64607609e-01, 6.94267932e-01,
        7.23127337e-01, 7.51070634e-01, 7.77986712e-01,
        8.03768950e-01, 8.28315603e-01, 8.51530175e-01,
        8.73321754e-01, 8.93605328e-01, 9.12302074e-01,
        9.29339610e-01, 9.44652227e-01, 9.58181079e-01,
        9.69874355e-01, 9.79687415e-01, 9.87582903e-01,
        9.93530836e-01, 9.97508672e-01, 9.99501358e-01]
    airfoilCtrlY = [-3.69171300e-05, -1.84336324e-04, -4.78186527e-04,
        -9.16526881e-04, -1.49653113e-03, -2.21457940e-03,
        -3.06636453e-03, -4.04700062e-03, -5.15112095e-03,
        -6.37295209e-03, -7.70635248e-03, -9.14480624e-03,
        -1.06813660e-02, -1.23085429e-02, -1.40181464e-02,
        -1.58010803e-02, -1.76471087e-02, -1.95446044e-02,
        -2.14803014e-02, -2.34390701e-02, -2.54037376e-02,
        -2.73549723e-02, -2.92712522e-02, -3.11289300e-02,
        -3.29024058e-02, -3.45644097e-02, -3.60863926e-02,
        -3.74392117e-02, -3.86304563e-02, -3.96930420e-02,
        -4.06199264e-02, -4.13757936e-02, -4.19261515e-02,
        -4.22380958e-02, -4.22810009e-02, -4.20271090e-02,
        -4.14519933e-02, -4.05348791e-02, -3.92588127e-02,
        -3.76106780e-02, -3.55810665e-02, -3.31640152e-02,
        -3.03566352e-02, -2.71586563e-02, -2.35719191e-02,
        -1.95998481e-02, -1.52469393e-02, -1.05182938e-02,
        -5.41922826e-03, 2.51649599e-05, 5.67015636e-03,
        1.13671818e-02, 1.70797093e-02, 2.27835690e-02,
        2.84477082e-02, 3.40350158e-02, 3.95033352e-02,
        4.48066262e-02, 4.98962337e-02, 5.47222184e-02,
        5.92347017e-02, 6.33851796e-02, 6.71277636e-02,
        7.04203120e-02, 7.32254187e-02, 7.55112392e-02,
        7.72521355e-02, 7.84291368e-02, 7.90302147e-02,
        7.90503846e-02, 7.84916478e-02, 7.73922733e-02,
        7.58376682e-02, 7.38909942e-02, 7.15801537e-02,
        6.89356356e-02, 6.59902334e-02, 6.27785999e-02,
        5.93368528e-02, 5.57022351e-02, 5.19128305e-02,
        4.80073261e-02, 4.40248132e-02, 4.00046128e-02,
        3.59861114e-02, 3.20085913e-02, 2.81110416e-02,
        2.43319390e-02, 2.07089892e-02, 1.72788242e-02,
        1.40766570e-02, 1.11358974e-02, 8.48773757e-03,
        6.16072151e-03, 4.18031245e-03, 2.56847668e-03,
        1.34330151e-03, 5.18664757e-04, 1.03971616e-04]

    airfoilXY = copy(hcat(airfoilX, airfoilY)')
    airfoilCtrlXY = copy(hcat(airfoilCtrlX, airfoilCtrlY)')

    Airfoil, Amat = VPM.setup(airfoilX, airfoilY, airfoilCtrlXY)


    V = [0.9961947, 0.0, -0.08715574]
    angle = rad2deg(atan(V[3], V[1]))
    println("Angle airfoil is rotated wrt xz axis: ", angle, "deg")
    cl, cm, Gamma, cpDist = VPM.solve(Airfoil, Amat, V)
    println("cl", cl)
    println("cm", cm)
    println("Cp dist: $(cpDist)")
    p = plot(airfoilX, -cpDist, label="-Cp", layout=(2, 1), xlims=(-0.05, 1.05), ylims=(-1.2, 2.2))
    plot!(airfoilX, airfoilY, subplot=2, aspect_ratio=:equal, ylims=(-0.1, 0.1), xlims=(-0.05, 1.05), label="Airfoil")
    savefig(p, "test_VPM.png")
end

function test_LL()
    airfoilX = [1.00000000e+00, 9.99748469e-01, 9.98994144e-01, 9.97737820e-01,
        9.95980826e-01, 9.93725017e-01, 9.90972776e-01, 9.87727006e-01,
        9.83991130e-01, 9.79769082e-01, 9.75065307e-01, 9.69884749e-01,
        9.64232850e-01, 9.58115535e-01, 9.51539214e-01, 9.44510764e-01,
        9.37037527e-01, 9.29127295e-01, 9.20788306e-01, 9.12029227e-01,
        9.02859150e-01, 8.93287575e-01, 8.83324401e-01, 8.72979917e-01,
        8.62264785e-01, 8.51190028e-01, 8.39767022e-01, 8.28007478e-01,
        8.15923431e-01, 8.03527225e-01, 7.90831502e-01, 7.77849185e-01,
        7.64593465e-01, 7.51077787e-01, 7.37315835e-01, 7.23321515e-01,
        7.09108945e-01, 6.94692435e-01, 6.80086473e-01, 6.65305712e-01,
        6.50364951e-01, 6.35279120e-01, 6.20063267e-01, 6.04732540e-01,
        5.89302170e-01, 5.73787460e-01, 5.58203764e-01, 5.42566474e-01,
        5.26891007e-01, 5.11192785e-01, 4.95487223e-01, 4.79789714e-01,
        4.64115613e-01, 4.48480227e-01, 4.32898794e-01, 4.17386477e-01,
        4.01958344e-01, 3.86738630e-01, 3.71649882e-01, 3.56690274e-01,
        3.41873673e-01, 3.27213781e-01, 3.12724131e-01, 2.98418080e-01,
        2.84308803e-01, 2.70409290e-01, 2.56732338e-01, 2.43290550e-01,
        2.30096330e-01, 2.17161876e-01, 2.04499178e-01, 1.92120011e-01,
        1.80035933e-01, 1.68258275e-01, 1.56798139e-01, 1.45666390e-01,
        1.34873649e-01, 1.24430284e-01, 1.14346405e-01, 1.04631850e-01,
        9.52961805e-02, 8.63486692e-02, 7.77982885e-02, 6.96537000e-02,
        6.19232428e-02, 5.46149212e-02, 4.77363922e-02, 4.12949532e-02,
        3.52975292e-02, 2.97506599e-02, 2.46604877e-02, 2.00327452e-02,
        1.58727434e-02, 1.21853607e-02, 8.97503220e-03, 6.24573957e-03,
        4.00100246e-03, 2.24387023e-03, 9.76914964e-04, 2.02225557e-04,
        -7.76150742e-05, 1.44393051e-04, 8.69839323e-04, 2.09882656e-03,
        3.83095023e-03, 6.06529546e-03, 8.80043400e-03, 1.20344211e-02,
        1.57647923e-02, 1.99885608e-02, 2.47022142e-02, 2.99017124e-02,
        3.55824857e-02, 4.17394326e-02, 4.83669198e-02, 5.54587816e-02,
        6.30083206e-02, 7.10083097e-02, 7.94509947e-02, 8.83280981e-02,
        9.76308247e-02, 1.07349867e-01, 1.17475415e-01, 1.27997163e-01,
        1.38904321e-01, 1.50185627e-01, 1.61829360e-01, 1.73823353e-01,
        1.86155013e-01, 1.98811334e-01, 2.11778916e-01, 2.25043987e-01,
        2.38592420e-01, 2.52409755e-01, 2.66481224e-01, 2.80791769e-01,
        2.95326068e-01, 3.10068557e-01, 3.25003456e-01, 3.40114791e-01,
        3.55386417e-01, 3.70802044e-01, 3.86345261e-01, 4.01983707e-01,
        4.17609168e-01, 4.33314925e-01, 4.49084928e-01, 4.64903087e-01,
        4.80753287e-01, 4.96619410e-01, 5.12485349e-01, 5.28335024e-01,
        5.44152404e-01, 5.59921518e-01, 5.75626476e-01, 5.91251481e-01,
        6.06780846e-01, 6.22199013e-01, 6.37490561e-01, 6.52640229e-01,
        6.67632925e-01, 6.82453740e-01, 6.97087967e-01, 7.11521109e-01,
        7.25738899e-01, 7.39727306e-01, 7.53472554e-01, 7.66961129e-01,
        7.80179797e-01, 7.93115612e-01, 8.05755930e-01, 8.18088419e-01,
        8.30101069e-01, 8.41782206e-01, 8.53120497e-01, 8.64104966e-01,
        8.74724998e-01, 8.84970350e-01, 8.94831160e-01, 9.04297954e-01,
        9.13361654e-01, 9.22013585e-01, 9.30245482e-01, 9.38049496e-01,
        9.45418198e-01, 9.52344587e-01, 9.58822093e-01, 9.64844583e-01,
        9.70406363e-01, 9.75502182e-01, 9.80127238e-01, 9.84277176e-01,
        9.87948094e-01, 9.91136544e-01, 9.93839535e-01, 9.96054533e-01,
        9.97779463e-01, 9.99012710e-01, 9.99753120e-01, 1.00000000e+00,]

    airfoilY = [1.32931687e-17, -1.82812930e-05, -7.30944855e-05, -1.64347800e-04,
        -2.91889208e-04, -4.55507800e-04, -6.54935663e-04, -8.89850197e-04,
        -1.15987683e-03, -1.46459203e-03, -1.80352658e-03, -2.17616897e-03,
        -2.58196882e-03, -3.02034029e-03, -3.49066530e-03, -3.99229653e-03,
        -4.52455996e-03, -5.08675710e-03, -5.67816655e-03, -6.29804503e-03,
        -6.94562764e-03, -7.62012742e-03, -8.32073416e-03, -9.04661229e-03,
        -9.79689802e-03, -1.05706957e-02, -1.13670732e-02, -1.21850570e-02,
        -1.30236259e-02, -1.38817046e-02, -1.47581570e-02, -1.56517783e-02,
        -1.65612877e-02, -1.74853203e-02, -1.84224193e-02, -1.93710285e-02,
        -2.03294850e-02, -2.12960119e-02, -2.22687127e-02, -2.32455654e-02,
        -2.42244185e-02, -2.52029874e-02, -2.61788525e-02, -2.71494585e-02,
        -2.81121150e-02, -2.90639992e-02, -3.00021597e-02, -3.09235223e-02,
        -3.18248972e-02, -3.27029883e-02, -3.35544039e-02, -3.43756691e-02,
        -3.51632398e-02, -3.59135179e-02, -3.66228683e-02, -3.72876365e-02,
        -3.79041676e-02, -3.84811382e-02, -3.90342882e-02, -3.95595359e-02,
        -4.00525040e-02, -4.05088092e-02, -4.09240870e-02, -4.12940166e-02,
        -4.16143446e-02, -4.18809091e-02, -4.20896616e-02, -4.22366881e-02,
        -4.23182288e-02, -4.23306958e-02, -4.22706893e-02, -4.21350113e-02,
        -4.19206774e-02, -4.16249266e-02, -4.12452281e-02, -4.07792865e-02,
        -4.02250441e-02, -3.95806809e-02, -3.88446129e-02, -3.80154873e-02,
        -3.70921764e-02, -3.60737690e-02, -3.49595605e-02, -3.37490410e-02,
        -3.24418823e-02, -3.10379237e-02, -2.95371569e-02, -2.79397099e-02,
        -2.62458312e-02, -2.44558733e-02, -2.25702762e-02, -2.05895518e-02,
        -1.85142688e-02, -1.63450378e-02, -1.40824985e-02, -1.17273072e-02,
        -9.28012641e-03, -6.74161609e-03, -4.11242610e-03, -1.39319109e-03,
        1.40565117e-03, 4.22447832e-03, 7.05238110e-03, 9.88778382e-03,
        1.27286299e-02, 1.55723930e-02, 1.84160921e-02, 2.12563096e-02,
        2.40892141e-02, 2.69105849e-02, 2.97158410e-02, 3.25000716e-02,
        3.52580700e-02, 3.79843691e-02, 4.06732791e-02, 4.33189260e-02,
        4.59152923e-02, 4.84562576e-02, 5.09356399e-02, 5.33472370e-02,
        5.56848679e-02, 5.79424128e-02, 6.01138529e-02, 6.21933088e-02,
        6.41750771e-02, 6.60536652e-02, 6.78238247e-02, 6.94805814e-02,
        7.10192641e-02, 7.24355299e-02, 7.37253873e-02, 7.48852162e-02,
        7.59117853e-02, 7.68022664e-02, 7.75542465e-02, 7.81657358e-02,
        7.86351743e-02, 7.89614351e-02, 7.91438251e-02, 7.91820838e-02,
        7.90763791e-02, 7.88273019e-02, 7.84358584e-02, 7.79037359e-02,
        7.72536172e-02, 7.65010834e-02, 7.56491024e-02, 7.47008558e-02,
        7.36597232e-02, 7.25292662e-02, 7.13132131e-02, 7.00154437e-02,
        6.86399746e-02, 6.71909460e-02, 6.56726076e-02, 6.40893072e-02,
        6.24454789e-02, 6.07456324e-02, 5.89943438e-02, 5.71962460e-02,
        5.53560212e-02, 5.34783935e-02, 5.15681218e-02, 4.96299943e-02,
        4.76688224e-02, 4.56894355e-02, 4.36966763e-02, 4.16953954e-02,
        3.96904467e-02, 3.76866826e-02, 3.56889483e-02, 3.37020768e-02,
        3.17308826e-02, 2.97801554e-02, 2.78546533e-02, 2.59590948e-02,
        2.40981510e-02, 2.22764362e-02, 2.04984987e-02, 1.87688101e-02,
        1.70917545e-02, 1.54716170e-02, 1.39125715e-02, 1.24186681e-02,
        1.09938204e-02, 9.64179183e-03, 8.36618292e-03, 7.17041746e-03,
        6.05772950e-03, 5.03115026e-03, 4.09349554e-03, 3.24735368e-03,
        2.49507408e-03, 1.83875666e-03, 1.28024209e-03, 8.21103204e-04,
        4.62637439e-04, 2.05860579e-04, 5.15017842e-05, -1.32931687e-17,]
    airfoilCtrlX = [9.99874235e-01, 9.99371307e-01, 9.98365982e-01, 9.96859323e-01,
        9.94852922e-01, 9.92348897e-01, 9.89349891e-01, 9.85859068e-01,
        9.81880106e-01, 9.77417195e-01, 9.72475028e-01, 9.67058800e-01,
        9.61174192e-01, 9.54827375e-01, 9.48024989e-01, 9.40774145e-01,
        9.33082411e-01, 9.24957800e-01, 9.16408766e-01, 9.07444188e-01,
        8.98073362e-01, 8.88305988e-01, 8.78152159e-01, 8.67622351e-01,
        8.56727406e-01, 8.45478525e-01, 8.33887250e-01, 8.21965454e-01,
        8.09725328e-01, 7.97179363e-01, 7.84340343e-01, 7.71221325e-01,
        7.57835626e-01, 7.44196811e-01, 7.30318675e-01, 7.16215230e-01,
        7.01900690e-01, 6.87389454e-01, 6.72696093e-01, 6.57835332e-01,
        6.42822035e-01, 6.27671194e-01, 6.12397903e-01, 5.97017355e-01,
        5.81544815e-01, 5.65995612e-01, 5.50385119e-01, 5.34728741e-01,
        5.19041896e-01, 5.03340004e-01, 4.87638468e-01, 4.71952664e-01,
        4.56297920e-01, 4.40689511e-01, 4.25142636e-01, 4.09672411e-01,
        3.94348487e-01, 3.79194256e-01, 3.64170078e-01, 3.49281974e-01,
        3.34543727e-01, 3.19968956e-01, 3.05571106e-01, 2.91363442e-01,
        2.77359046e-01, 2.63570814e-01, 2.50011444e-01, 2.36693440e-01,
        2.23629103e-01, 2.10830527e-01, 1.98309594e-01, 1.86077972e-01,
        1.74147104e-01, 1.62528207e-01, 1.51232265e-01, 1.40270020e-01,
        1.29651967e-01, 1.19388344e-01, 1.09489127e-01, 9.99640151e-02,
        9.08224248e-02, 8.20734789e-02, 7.37259943e-02, 6.57884714e-02,
        5.82690820e-02, 5.11756567e-02, 4.45156727e-02, 3.82962412e-02,
        3.25240945e-02, 2.72055738e-02, 2.23466164e-02, 1.79527443e-02,
        1.40290521e-02, 1.05801965e-02, 7.61038589e-03, 5.12337102e-03,
        3.12243635e-03, 1.61039260e-03, 5.89570260e-04, 6.23052412e-05,
        3.33889886e-05, 5.07116187e-04, 1.48433294e-03, 2.96488839e-03,
        4.94812284e-03, 7.43286473e-03, 1.04174275e-02, 1.38996067e-02,
        1.78766765e-02, 2.23453875e-02, 2.73019633e-02, 3.27420991e-02,
        3.86609591e-02, 4.50531762e-02, 5.19128507e-02, 5.92335511e-02,
        6.70083152e-02, 7.52296522e-02, 8.38895464e-02, 9.29794614e-02,
        1.02490346e-01, 1.12412641e-01, 1.22736289e-01, 1.33450742e-01,
        1.44544974e-01, 1.56007493e-01, 1.67826356e-01, 1.79989183e-01,
        1.92483173e-01, 2.05295125e-01, 2.18411452e-01, 2.31818203e-01,
        2.45501088e-01, 2.59445490e-01, 2.73636497e-01, 2.88058919e-01,
        3.02697313e-01, 3.17536007e-01, 3.32559124e-01, 3.47750604e-01,
        3.63094230e-01, 3.78573652e-01, 3.94164484e-01, 4.09796437e-01,
        4.25462047e-01, 4.41199927e-01, 4.56994008e-01, 4.72828187e-01,
        4.88686349e-01, 5.04552380e-01, 5.20410186e-01, 5.36243714e-01,
        5.52036961e-01, 5.67773997e-01, 5.83438978e-01, 5.99016163e-01,
        6.14489929e-01, 6.29844787e-01, 6.45065395e-01, 6.60136577e-01,
        6.75043332e-01, 6.89770853e-01, 7.04304538e-01, 7.18630004e-01,
        7.32733103e-01, 7.46599930e-01, 7.60216841e-01, 7.73570463e-01,
        7.86647704e-01, 7.99435771e-01, 8.11922175e-01, 8.24094744e-01,
        8.35941638e-01, 8.47451352e-01, 8.58612732e-01, 8.69414982e-01,
        8.79847674e-01, 8.89900755e-01, 8.99564557e-01, 9.08829804e-01,
        9.17687620e-01, 9.26129534e-01, 9.34147489e-01, 9.41733847e-01,
        9.48881392e-01, 9.55583340e-01, 9.61833338e-01, 9.67625473e-01,
        9.72954273e-01, 9.77814710e-01, 9.82202207e-01, 9.86112635e-01,
        9.89542319e-01, 9.92488039e-01, 9.94947034e-01, 9.96916998e-01,
        9.98396086e-01, 9.99382915e-01, 9.99876560e-01,]
    airfoilCtrlY = [-9.14064650e-06, -4.56878893e-05, -1.18721143e-04, -2.28118504e-04,
        -3.73698504e-04, -5.55221732e-04, -7.72392930e-04, -1.02486351e-03,
        -1.31223443e-03, -1.63405931e-03, -1.98984778e-03, -2.37906889e-03,
        -2.80115455e-03, -3.25550279e-03, -3.74148092e-03, -4.25842824e-03,
        -4.80565853e-03, -5.38246183e-03, -5.98810579e-03, -6.62183633e-03,
        -7.28287753e-03, -7.97043079e-03, -8.68367322e-03, -9.42175515e-03,
        -1.01837968e-02, -1.09688845e-02, -1.17760651e-02, -1.26043414e-02,
        -1.34526652e-02, -1.43199308e-02, -1.52049676e-02, -1.61065330e-02,
        -1.70233040e-02, -1.79538698e-02, -1.88967239e-02, -1.98502568e-02,
        -2.08127485e-02, -2.17823623e-02, -2.27571391e-02, -2.37349920e-02,
        -2.47137030e-02, -2.56909200e-02, -2.66641555e-02, -2.76307867e-02,
        -2.85880571e-02, -2.95330794e-02, -3.04628410e-02, -3.13742097e-02,
        -3.22639427e-02, -3.31286961e-02, -3.39650365e-02, -3.47694545e-02,
        -3.55383789e-02, -3.62681931e-02, -3.69552524e-02, -3.75959020e-02,
        -3.81926529e-02, -3.87577132e-02, -3.92969120e-02, -3.98060199e-02,
        -4.02806566e-02, -4.07164481e-02, -4.11090518e-02, -4.14541806e-02,
        -4.17476268e-02, -4.19852853e-02, -4.21631748e-02, -4.22774584e-02,
        -4.23244623e-02, -4.23006926e-02, -4.22028503e-02, -4.20278444e-02,
        -4.17728020e-02, -4.14350774e-02, -4.10122573e-02, -4.05021653e-02,
        -3.99028625e-02, -3.92126469e-02, -3.84300501e-02, -3.75538319e-02,
        -3.65829727e-02, -3.55166647e-02, -3.43543007e-02, -3.30954616e-02,
        -3.17399030e-02, -3.02875403e-02, -2.87384334e-02, -2.70927706e-02,
        -2.53508523e-02, -2.35130747e-02, -2.15799140e-02, -1.95519103e-02,
        -1.74296533e-02, -1.52137682e-02, -1.29049028e-02, -1.05037168e-02,
        -8.01087125e-03, -5.42702110e-03, -2.75280860e-03, 6.23003887e-06,
        2.81506475e-03, 5.63842971e-03, 8.47008246e-03, 1.13082069e-02,
        1.41505115e-02, 1.69942426e-02, 1.98362009e-02, 2.26727619e-02,
        2.54998995e-02, 2.83132129e-02, 3.11079563e-02, 3.38790708e-02,
        3.66212196e-02, 3.93288241e-02, 4.19961025e-02, 4.46171091e-02,
        4.71857749e-02, 4.96959487e-02, 5.21414384e-02, 5.45160525e-02,
        5.68136403e-02, 5.90281328e-02, 6.11535809e-02, 6.31841929e-02,
        6.51143711e-02, 6.69387449e-02, 6.86522030e-02, 7.02499227e-02,
        7.17273970e-02, 7.30804586e-02, 7.43053018e-02, 7.53985007e-02,
        7.63570258e-02, 7.71782565e-02, 7.78599911e-02, 7.84004550e-02,
        7.87983047e-02, 7.90526301e-02, 7.91629545e-02, 7.91292314e-02,
        7.89518405e-02, 7.86315802e-02, 7.81697972e-02, 7.75786766e-02,
        7.68773503e-02, 7.60750929e-02, 7.51749791e-02, 7.41802895e-02,
        7.30944947e-02, 7.19212396e-02, 7.06643284e-02, 6.93277092e-02,
        6.79154603e-02, 6.64317768e-02, 6.48809574e-02, 6.32673930e-02,
        6.15955556e-02, 5.98699881e-02, 5.80952949e-02, 5.62761336e-02,
        5.44172074e-02, 5.25232576e-02, 5.05990581e-02, 4.86494083e-02,
        4.66791290e-02, 4.46930559e-02, 4.26960358e-02, 4.06929210e-02,
        3.86885647e-02, 3.66878155e-02, 3.46955126e-02, 3.27164797e-02,
        3.07555190e-02, 2.88174043e-02, 2.69068740e-02, 2.50286229e-02,
        2.31872936e-02, 2.13874675e-02, 1.96336544e-02, 1.79302823e-02,
        1.62816858e-02, 1.46920943e-02, 1.31656198e-02, 1.17062442e-02,
        1.03178061e-02, 9.00398737e-03, 7.76830019e-03, 6.61407348e-03,
        5.54443988e-03, 4.56232290e-03, 3.67042461e-03, 2.87121388e-03,
        2.16691537e-03, 1.55949937e-03, 1.05067265e-03, 6.41870322e-04,
        3.34249009e-04, 1.28681182e-04, 2.57508921e-05]

    airfoilXY = copy(transpose(hcat(airfoilX, airfoilY)))
    airfoilCtrlXY = copy(transpose(hcat(airfoilCtrlX, airfoilCtrlY)))

    Uinf = [1.0, 0.0, 0.1]
    span = 8.0
    sweep = deg2rad(1.0)
    rootChord = 1.0
    TR = 1.0
    npt_wing = 99
    npt_wing = 21
    options = Dict(
        "make_plot" => true,
    )
    # options = nothing
    LLSystem, FlowCond, LLHydro, Airfoil, Airfoil_influences = LiftingLine.setup(Uinf, span, sweep, rootChord, TR;
        npt_wing=npt_wing, npt_airfoil=99, airfoil_xy=airfoilXY, airfoil_ctrl_xy=airfoilCtrlXY, options=options)
    @time LLOutputs = LiftingLine.solve(FlowCond, LLSystem, LLSystem.HydroProperties[1], Airfoil, Airfoil_influences)

    Fdist = LLOutputs.Fdist
    circDist = LLOutputs.Γdist
    F = LLOutputs.F
    println("Forces: $(F)")
    println("CL:\n$(LLOutputs.CL)\nCDi\n$(LLOutputs.CDi)\nCside:\n$(LLOutputs.CS)")
    return LLOutputs, FlowCond, LLSystem
end

function test_45degwingLL()
    airfoilCoordFile = "$(pwd())/INPUT/PROFILES/NACA0012.dat"

    airfoilX = [1.00000000e+00, 9.98993338e-01, 9.95977406e-01, 9.90964349e-01,
        9.83974351e-01, 9.75035559e-01, 9.64183967e-01, 9.51463269e-01,
        9.36924689e-01, 9.20626766e-01, 9.02635129e-01, 8.83022222e-01,
        8.61867019e-01, 8.39254706e-01, 8.15276334e-01, 7.90028455e-01,
        7.63612734e-01, 7.36135537e-01, 7.07707507e-01, 6.78443111e-01,
        6.48460188e-01, 6.17879468e-01, 5.86824089e-01, 5.55419100e-01,
        5.23790958e-01, 4.92067018e-01, 4.60375022e-01, 4.28842581e-01,
        3.97596666e-01, 3.66763093e-01, 3.36466018e-01, 3.06827437e-01,
        2.77966694e-01, 2.50000000e-01, 2.23039968e-01, 1.97195156e-01,
        1.72569633e-01, 1.49262556e-01, 1.27367775e-01, 1.06973453e-01,
        8.81617093e-02, 7.10082934e-02, 5.55822757e-02, 4.19457713e-02,
        3.01536896e-02, 2.02535132e-02, 1.22851066e-02, 6.28055566e-03,
        2.26403871e-03, 2.51728808e-04, 2.51728808e-04, 2.26403871e-03,
        6.28055566e-03, 1.22851066e-02, 2.02535132e-02, 3.01536896e-02,
        4.19457713e-02, 5.55822757e-02, 7.10082934e-02, 8.81617093e-02,
        1.06973453e-01, 1.27367775e-01, 1.49262556e-01, 1.72569633e-01,
        1.97195156e-01, 2.23039968e-01, 2.50000000e-01, 2.77966694e-01,
        3.06827437e-01, 3.36466018e-01, 3.66763093e-01, 3.97596666e-01,
        4.28842581e-01, 4.60375022e-01, 4.92067018e-01, 5.23790958e-01,
        5.55419100e-01, 5.86824089e-01, 6.17879468e-01, 6.48460188e-01,
        6.78443111e-01, 7.07707507e-01, 7.36135537e-01, 7.63612734e-01,
        7.90028455e-01, 8.15276334e-01, 8.39254706e-01, 8.61867019e-01,
        8.83022222e-01, 9.02635129e-01, 9.20626766e-01, 9.36924689e-01,
        9.51463269e-01, 9.64183967e-01, 9.75035559e-01, 9.83974351e-01,
        9.90964349e-01, 9.95977406e-01, 9.98993338e-01, 1.00000000e+00]

    airfoilY = [1.33226763e-17, -1.41200438e-04, -5.63343432e-04, -1.26208774e-03,
        -2.23030811e-03, -3.45825298e-03, -4.93375074e-03, -6.64245132e-03,
        -8.56808791e-03, -1.06927428e-02, -1.29971013e-02, -1.54606806e-02,
        -1.80620201e-02, -2.07788284e-02, -2.35880799e-02, -2.64660655e-02,
        -2.93884006e-02, -3.23300020e-02, -3.52650469e-02, -3.81669313e-02,
        -4.10082448e-02, -4.37607812e-02, -4.63956016e-02, -4.88831639e-02,
        -5.11935307e-02, -5.32966591e-02, -5.51627743e-02, -5.67628192e-02,
        -5.80689678e-02, -5.90551853e-02, -5.96978089e-02, -5.99761253e-02,
        -5.98729133e-02, -5.93749219e-02, -5.84732545e-02, -5.71636340e-02,
        -5.54465251e-02, -5.33271006e-02, -5.08150416e-02, -4.79241724e-02,
        -4.46719377e-02, -4.10787401e-02, -3.71671601e-02, -3.29610920e-02,
        -2.84848303e-02, -2.37621474e-02, -1.88154040e-02, -1.36647314e-02,
        -8.32732576e-03, -2.81688492e-03, 2.81688492e-03, 8.32732576e-03,
        1.36647314e-02, 1.88154040e-02, 2.37621474e-02, 2.84848303e-02,
        3.29610920e-02, 3.71671601e-02, 4.10787401e-02, 4.46719377e-02,
        4.79241724e-02, 5.08150416e-02, 5.33271006e-02, 5.54465251e-02,
        5.71636340e-02, 5.84732545e-02, 5.93749219e-02, 5.98729133e-02,
        5.99761253e-02, 5.96978089e-02, 5.90551853e-02, 5.80689678e-02,
        5.67628192e-02, 5.51627743e-02, 5.32966591e-02, 5.11935307e-02,
        4.88831639e-02, 4.63956016e-02, 4.37607812e-02, 4.10082448e-02,
        3.81669313e-02, 3.52650469e-02, 3.23300020e-02, 2.93884006e-02,
        2.64660655e-02, 2.35880799e-02, 2.07788284e-02, 1.80620201e-02,
        1.54606806e-02, 1.29971013e-02, 1.06927428e-02, 8.56808791e-03,
        6.64245132e-03, 4.93375074e-03, 3.45825298e-03, 2.23030811e-03,
        1.26208774e-03, 5.63343432e-04, 1.41200438e-04, -1.33226763e-17]
    airfoilCtrlX = [9.99496669e-01, 9.97485372e-01, 9.93470878e-01, 9.87469350e-01,
        9.79504955e-01, 9.69609763e-01, 9.57823618e-01, 9.44193979e-01,
        9.28775727e-01, 9.11630948e-01, 8.92828675e-01, 8.72444620e-01,
        8.50560862e-01, 8.27265520e-01, 8.02652394e-01, 7.76820594e-01,
        7.49874136e-01, 7.21921522e-01, 6.93075309e-01, 6.63451649e-01,
        6.33169828e-01, 6.02351778e-01, 5.71121594e-01, 5.39605029e-01,
        5.07928988e-01, 4.76221020e-01, 4.44608801e-01, 4.13219623e-01,
        3.82179880e-01, 3.51614556e-01, 3.21646728e-01, 2.92397065e-01,
        2.63983347e-01, 2.36519984e-01, 2.10117562e-01, 1.84882395e-01,
        1.60916095e-01, 1.38315166e-01, 1.17170614e-01, 9.75675810e-02,
        7.95850013e-02, 6.32952845e-02, 4.87640235e-02, 3.60497304e-02,
        2.52036014e-02, 1.62693099e-02, 9.28283111e-03, 4.27229719e-03,
        1.25788376e-03, 2.51728808e-04, 1.25788376e-03, 4.27229719e-03,
        9.28283111e-03, 1.62693099e-02, 2.52036014e-02, 3.60497304e-02,
        4.87640235e-02, 6.32952845e-02, 7.95850013e-02, 9.75675810e-02,
        1.17170614e-01, 1.38315166e-01, 1.60916095e-01, 1.84882395e-01,
        2.10117562e-01, 2.36519984e-01, 2.63983347e-01, 2.92397065e-01,
        3.21646728e-01, 3.51614556e-01, 3.82179880e-01, 4.13219623e-01,
        4.44608801e-01, 4.76221020e-01, 5.07928988e-01, 5.39605029e-01,
        5.71121594e-01, 6.02351778e-01, 6.33169828e-01, 6.63451649e-01,
        6.93075309e-01, 7.21921522e-01, 7.49874136e-01, 7.76820594e-01,
        8.02652394e-01, 8.27265520e-01, 8.50560862e-01, 8.72444620e-01,
        8.92828675e-01, 9.11630948e-01, 9.28775727e-01, 9.44193979e-01,
        9.57823618e-01, 9.69609763e-01, 9.79504955e-01, 9.87469350e-01,
        9.93470878e-01, 9.97485372e-01, 9.99496669e-01]
    airfoilCtrlY = [-7.06002188e-05, -3.52271935e-04, -9.12715585e-04, -1.74619792e-03,
        -2.84428054e-03, -4.19600186e-03, -5.78810103e-03, -7.60526962e-03,
        -9.63041534e-03, -1.18449221e-02, -1.42288910e-02, -1.67613504e-02,
        -1.94204243e-02, -2.21834542e-02, -2.50270727e-02, -2.79272331e-02,
        -3.08592013e-02, -3.37975244e-02, -3.67159891e-02, -3.95875880e-02,
        -4.23845130e-02, -4.50781914e-02, -4.76393828e-02, -5.00383473e-02,
        -5.22450949e-02, -5.42297167e-02, -5.59627967e-02, -5.74158935e-02,
        -5.85620766e-02, -5.93764971e-02, -5.98369671e-02, -5.99245193e-02,
        -5.96239176e-02, -5.89240882e-02, -5.78184443e-02, -5.63050796e-02,
        -5.43868129e-02, -5.20710711e-02, -4.93696070e-02, -4.62980550e-02,
        -4.28753389e-02, -3.91229501e-02, -3.50641261e-02, -3.07229612e-02,
        -2.61234889e-02, -2.12887757e-02, -1.62400677e-02, -1.09960286e-02,
        -5.57210534e-03, 0.00000000e+00, 5.57210534e-03, 1.09960286e-02,
        1.62400677e-02, 2.12887757e-02, 2.61234889e-02, 3.07229612e-02,
        3.50641261e-02, 3.91229501e-02, 4.28753389e-02, 4.62980550e-02,
        4.93696070e-02, 5.20710711e-02, 5.43868129e-02, 5.63050796e-02,
        5.78184443e-02, 5.89240882e-02, 5.96239176e-02, 5.99245193e-02,
        5.98369671e-02, 5.93764971e-02, 5.85620766e-02, 5.74158935e-02,
        5.59627967e-02, 5.42297167e-02, 5.22450949e-02, 5.00383473e-02,
        4.76393828e-02, 4.50781914e-02, 4.23845130e-02, 3.95875880e-02,
        3.67159891e-02, 3.37975244e-02, 3.08592013e-02, 2.79272331e-02,
        2.50270727e-02, 2.21834542e-02, 1.94204243e-02, 1.67613504e-02,
        1.42288910e-02, 1.18449221e-02, 9.63041534e-03, 7.60526962e-03,
        5.78810103e-03, 4.19600186e-03, 2.84428054e-03, 1.74619792e-03,
        9.12715585e-04, 3.52271935e-04, 7.06002188e-05]

    airfoilXY = copy(transpose(hcat(airfoilX, airfoilY)))
    airfoilCtrlXY = copy(transpose(hcat(airfoilCtrlX, airfoilCtrlY)))


    Uinf = 50.0
    angles = [0.01, 2.1, 4.2, 6.3, 8.4, 10.5]
    # angles = [4.2]
    # alpha = deg2rad(4.2)

    rootChord = 20.0 * 0.0254 # 20 inches
    span = 5 * rootChord
    sweepAng = deg2rad(45)
    TR = 1.0
    npt_wing = 40
    npt_airfoil = 99

    for alpha in deg2rad.(angles)
        Uvec = [cos(alpha), 0.0, sin(alpha)] * Uinf
        LLSystem, FlowCond, LLHydro, Airfoils, AirfoilInfluences = LiftingLine.setup(Uvec, span, sweepAng, rootChord, TR;
            npt_wing=npt_wing, npt_airfoil,
            airfoilCoordFile=airfoilCoordFile,
            # airfoil_ctrl_xy=airfoilCtrlXY,
            # airfoil_xy=airfoilXY,
        )
        @time LLOutputs = LiftingLine.solve(FlowCond, LLSystem, LLHydro, Airfoils, AirfoilInfluences)
        F = LLOutputs.F
        # println("Forces: $(F)")
        # println("Spanwise cl: $(LLOutputs.Fdist[3,:])")
        println("alpha: $(rad2deg(alpha))")
        println("CL:\n$(LLOutputs.CL)\nCDi\n$(LLOutputs.CDi)\nCside:\n$(LLOutputs.CS)")
    end
    return LLOutputs, FlowCond, LLSystem
end
# ==============================================================================
#                         Run some tests
# ==============================================================================
# test_VPM()
# LLOutputs, FlowCond, LLSystem = test_LL()

LLOutputs, FlowCond, LLSystem = test_45degwingLL()
TecplotIO.write_hydroLoads(LLOutputs, FlowCond, LLSystem, "./OUTPUT/")
TecplotIO.write_hydromesh(LLSystem, FlowCond.uvec, "./OUTPUT/")